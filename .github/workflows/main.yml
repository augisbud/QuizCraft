name: .NET CI/CD

permissions:
  packages: write

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: |
          dotnet restore ./QuizCraft.Domain.API
          dotnet restore ./QuizCraft.Domain.API.Tests/QuizCraft.Domain.API.Tests.Unit
          dotnet restore ./QuizCraft.Domain.API.Tests/QuizCraft.Domain.API.Tests.Integration

      - name: Build
        run: |
          dotnet build ./QuizCraft.Domain.API --configuration Release --no-restore
          dotnet build ./QuizCraft.Domain.API.Tests/QuizCraft.Domain.API.Tests.Unit --configuration Release --no-restore
          dotnet build ./QuizCraft.Domain.API.Tests/QuizCraft.Domain.API.Tests.Integration --configuration Release --no-restore

      - name: Test
        run: |
          dotnet test ./QuizCraft.Domain.API.Tests/QuizCraft.Domain.API.Tests.Unit --configuration Release --no-build --verbosity normal
          dotnet test ./QuizCraft.Domain.API.Tests/QuizCraft.Domain.API.Tests.Integration --configuration Release --no-build --verbosity normal

      - name: Publish
        run: |
          dotnet publish ./QuizCraft.Domain.API --configuration Release --no-build --verbosity normal

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/augisbud/quizcraft/backend:latest ./QuizCraft.Domain.API

      - name: Push Docker image
        run: |
          docker push ghcr.io/augisbud/quizcraft/backend:latest

  CD:
    runs-on: ubuntu-latest
    needs: CI

    steps:
      - name: Connect to VPN
        uses: matcontardo/setup-vpn-client-meraki@1.5
        with:
          
          server: ${{ secrets.VPN_IPADDRESS }}
          psk: ${{ secrets.VPN_PSK }}
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}
          network_route: '193.219.91.103/32'
          test_ip: '193.219.91.103'

      - name: Verify SSH Configuration
        run: |
          echo "Using SSH Host: ${{ secrets.SSH_HOST }}"
          echo "Using SSH Port: ${{ secrets.SSH_PORT }}"
          # Test SSH connection
          ssh -i $HOME/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH Connection Successful'" || echo "SSH Connection Failed"

      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: |
            DOCKER_IMAGE=ghcr.io/augisbud/quizcraft/backend:latest
          script: |
            docker pull $DOCKER_IMAGE
            docker stop backend || true
            docker rm backend || true
            docker run -d --name backend -p 8080:8080 $DOCKER_IMAGE
